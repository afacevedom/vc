<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing</title><link>https://afacevedom.github.io/vc/docs/shortcodes/workshops/</link><description>Recent content on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://afacevedom.github.io/vc/docs/shortcodes/workshops/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://afacevedom.github.io/vc/docs/shortcodes/workshops/rendering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://afacevedom.github.io/vc/docs/shortcodes/workshops/rendering/</guid><description>Algoritmo de BERSENHAM # Metodo para rasterizar lineas
Algoritmo Basico # El algoritmo funciona de la siguiente manera, asumimos un pixel en la posicion \(P_1(x_1,y_1)\) , nos moveremos un pixel a la vez de forma horizontal hasta el punto final de la linea en \(P_2(x_2,y_2)\) ; cada paso que nos movemos en sentido del eje \(X\) tendremos que escoger entre dos pixeles:</description></item><item><title/><link>https://afacevedom.github.io/vc/docs/shortcodes/workshops/rendering_anjimenezp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://afacevedom.github.io/vc/docs/shortcodes/workshops/rendering_anjimenezp/</guid><description>Algoritmo de BERSENHAM # Metodo para rasterizar lineas
Algoritmo Basico # El algoritmo funciona de la siguiente manera, asumimos un pixel en la posicion \(P_1(x_1,y_1)\) , nos moveremos un pixel a la vez de forma horizontal hasta el punto final de la linea en \(P_2(x_2,y_2)\) ; cada paso que nos movemos en sentido del eje \(X\) tendremos que escoger entre dos pixeles:</description></item><item><title/><link>https://afacevedom.github.io/vc/docs/shortcodes/workshops/Visibilidad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://afacevedom.github.io/vc/docs/shortcodes/workshops/Visibilidad/</guid><description>Algoritmo de visibilizacion (Z-Buffer) # Algoritmo Z-Buffer para el problema de visibilidad
El problema de visibilidad es el problema de decidir cuales elementos de una escena son visibles y cuales se &amp;ldquo;esconden&amp;rdquo;.
Definicion # Es un tipo de buffer de datos usados en computacion grafica para representar informacion de la profundidad de los objetos en un espacio 3D desde una perspectiva particular. Los búferes de profundidad son una ayuda para renderizar una escena para garantizar que los correctos polígonos ocluyan correctamente otros polígonos.</description></item></channel></rss>